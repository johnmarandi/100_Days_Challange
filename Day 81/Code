import java.util.Arrays;

class Solution {
    public void solveSudoku(char[][] boardd) {
        
        int[][] board = new int[boardd.length][boardd[0].length];
        for(int i=0;i<boardd.length;i++) for(int j=0;j<boardd[0].length;j++) if(boardd[i][j]!='.') 
            board[i][j] = Integer.parseInt(String.valueOf(boardd[i][j]));
        
        Sudoku(board,0,0);
        
        for(int i=0;i<boardd.length;i++) for(int j=0;j<boardd[0].length;j++) 
            boardd[i][j] = (char) (board[i][j] + '0');
    }
   
    public boolean Sudoku(int[][] board, int r, int c){
        if(isCompleted(board)) return true;
        if(c>=board.length) return Sudoku(board,r+1,0);
        if(board[r][c]>0) return Sudoku(board,r,c+1);
        // backtracking
        for(int i=1;i<=9;i++){
            if(isSafe(board,r,c,i)){
                board[r][c] = i;
                if(Sudoku(board,r,c+1)) return true;
                else board[r][c] = 0;
            }
        }
        return false;
    }
    
    public boolean isCompleted(int[][] board){
        for(int[] val: board) for(int num: val) if(num==0) return false;
        return true;
    }
    
    public boolean isSafe(int[][] board, int r, int c, int num){
        for(int i=0;i<board[0].length;i++) if(board[r][i]==num) return false;
        for(int i=0;i<board.length;i++) if(board[i][c]==num) return false;
		
		// to find dublicates in the box
        int sqrt = (int)Math.sqrt(board.length);
        int row = r - r%sqrt;
        int col = c - c%sqrt;

        for(int i=row;i<row+sqrt;i++) for(int j=col;j<col+sqrt;j++) if(board[i][j]==num) return false;
        
        return true;
    }
}
